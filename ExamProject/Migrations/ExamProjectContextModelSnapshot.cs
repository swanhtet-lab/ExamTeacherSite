// <auto-generated />
using ExamProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExamProject.Migrations
{
    [DbContext(typeof(ExamProjectContext))]
    partial class ExamProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExamProject.Models.Class", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"));

                    b.Property<string>("Class1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Class");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Class", (string)null);
                });

            modelBuilder.Entity("ExamProject.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("Department1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Department");

                    b.HasKey("DepartmentId");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("ExamProject.Models.QuestionMode", b =>
                {
                    b.Property<int>("QuestionModeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionModeId"));

                    b.Property<string>("GivenPoint")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("QuestionMode1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("QuestionMode");

                    b.HasKey("QuestionModeId");

                    b.ToTable("QuestionMode", (string)null);
                });

            modelBuilder.Entity("ExamProject.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("StudentEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("StudentPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentRoll")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.HasIndex("ClassId");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("ExamProject.Models.StudentAnswer", b =>
                {
                    b.Property<int>("StudentAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentAnswerId"));

                    b.Property<string>("Point")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuestionModeId")
                        .HasColumnType("int");

                    b.Property<string>("StudentAnswer1")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("StudentAnswer");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherQuestionAnswerId")
                        .HasColumnType("int");

                    b.HasKey("StudentAnswerId");

                    b.HasIndex("QuestionModeId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherQuestionAnswerId");

                    b.ToTable("StudentAnswer", (string)null);
                });

            modelBuilder.Entity("ExamProject.Models.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectId"));

                    b.Property<string>("Availability")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("AvailableTime")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Subject1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Subject");

                    b.HasKey("SubjectId");

                    b.HasIndex("ClassId");

                    b.ToTable("Subject", (string)null);
                });

            modelBuilder.Entity("ExamProject.Models.Teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherId"));

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("TeacherEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("TeacherPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeacherPhone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeacherId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Teacher", (string)null);
                });

            modelBuilder.Entity("ExamProject.Models.TeachertQa", b =>
                {
                    b.Property<int>("TeacherQuestionAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherQuestionAnswerId"));

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuestionModeId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("TeacherQuestionAnswerId");

                    b.HasIndex("QuestionModeId");

                    b.HasIndex("SubjectId");

                    b.ToTable("TeachertQA", (string)null);
                });

            modelBuilder.Entity("ExamProject.Models.Class", b =>
                {
                    b.HasOne("ExamProject.Models.Department", "Department")
                        .WithMany("Classes")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_Class_Department");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ExamProject.Models.Student", b =>
                {
                    b.HasOne("ExamProject.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_Student_Class");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("ExamProject.Models.StudentAnswer", b =>
                {
                    b.HasOne("ExamProject.Models.QuestionMode", "QuestionMode")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("QuestionModeId")
                        .HasConstraintName("FK_StudentAnswer_QuestionMode");

                    b.HasOne("ExamProject.Models.Student", "Student")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentAnswer_Student");

                    b.HasOne("ExamProject.Models.TeachertQa", "TeacherQuestionAnswer")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("TeacherQuestionAnswerId")
                        .HasConstraintName("FK_StudentAnswer_TeachertQA");

                    b.Navigation("QuestionMode");

                    b.Navigation("Student");

                    b.Navigation("TeacherQuestionAnswer");
                });

            modelBuilder.Entity("ExamProject.Models.Subject", b =>
                {
                    b.HasOne("ExamProject.Models.Class", "Class")
                        .WithMany("Subjects")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_Subject_Class");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("ExamProject.Models.Teacher", b =>
                {
                    b.HasOne("ExamProject.Models.Department", "Department")
                        .WithMany("Teachers")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_Teacher_Department");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ExamProject.Models.TeachertQa", b =>
                {
                    b.HasOne("ExamProject.Models.QuestionMode", "QuestionMode")
                        .WithMany("TeachertQas")
                        .HasForeignKey("QuestionModeId")
                        .HasConstraintName("FK_TeachertQA_QuestionMode");

                    b.HasOne("ExamProject.Models.Subject", "Subject")
                        .WithMany("TeachertQas")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_TeachertQA_Subject");

                    b.Navigation("QuestionMode");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ExamProject.Models.Class", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("ExamProject.Models.Department", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("ExamProject.Models.QuestionMode", b =>
                {
                    b.Navigation("StudentAnswers");

                    b.Navigation("TeachertQas");
                });

            modelBuilder.Entity("ExamProject.Models.Student", b =>
                {
                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("ExamProject.Models.Subject", b =>
                {
                    b.Navigation("TeachertQas");
                });

            modelBuilder.Entity("ExamProject.Models.TeachertQa", b =>
                {
                    b.Navigation("StudentAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
